import asyncio
from .wb_api import get_available_slots, book_slot # Modified import for relative path
from aiogram import types

async def start_monitoring(user_id, data, message: types.Message):
    token = data['token']
    start = data['start_date']
    end = data['end_date']
    type_pref = data['type']
    supply_id = data['supply_id']

    interval = 1
    retries = 0

    while True:
        try:
            slots = await get_available_slots(token)
            suitable = [s for s in slots if start <= s['date'] <= end and s['type'] == type_pref]
            if suitable:
                result = await book_slot(token, suitable[0], supply_id)
                await message.answer(
                    f"‚úÖ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
                    f"üìÖ –î–∞—Ç–∞: {suitable[0]['date']}\n"
                    f"üè¢ –°–∫–ª–∞–¥: {suitable[0]['warehouse']}\n"
                    f"üì¶ –¢–∏–ø –ø—Ä–∏—ë–º–∫–∏: {suitable[0]['type']}",
                    parse_mode='HTML'
                )
                return
            await asyncio.sleep(interval)
        except Exception as e:
            retries += 1
            wait_time = min(10, 2 * retries)
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ WB API: {str(e)}\n‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
            await asyncio.sleep(wait_time)
