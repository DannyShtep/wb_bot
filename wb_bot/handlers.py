from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from states import BookingState
from scheduler import start_monitoring
from wb_api import get_available_draft_supplies
from keyboards import get_main_menu_keyboard, get_cancel_monitoring_keyboard # –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä

def register_handlers(dp: Dispatcher):
    @dp.message_handler(commands=['start'], state='*')
    async def start_cmd(message: types.Message, state: FSMContext):
        await state.finish() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ WB –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω WB API, —É–∫–∞–∂–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–∂–∏–¥–∞–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! –ë–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–µ—Ç —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.",
            reply_markup=get_main_menu_keyboard() # –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )

    @dp.message_handler(text="–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", state='*') # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    async def start_booking_from_menu(message: types.Message, state: FSMContext):
        await state.finish() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" –∏–∑ –º–µ–Ω—é
        await message.answer("üëã –í–≤–µ–¥–∏ —Å–≤–æ–π WB API —Ç–æ–∫–µ–Ω:")
        await BookingState.waiting_for_token.set()

    @dp.message_handler(state=BookingState.waiting_for_token)
    async def process_token(message: types.Message, state: FSMContext):
        await state.update_data(token=message.text.strip())
        try:
            supplies = await get_available_draft_supplies(message.text.strip())
            if not supplies:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫.", reply_markup=get_main_menu_keyboard()) # –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await state.finish()
                return
            text = "üì¶ –ù–∞–π–¥–µ–Ω—ã —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫:\n\n"
            buttons = []
            for s in supplies:
                text += f"‚Ä¢ {s['id']} ‚Äî —Å–æ–∑–¥–∞–Ω: {s['createdAt'][:10]}\n"
                buttons.append(types.InlineKeyboardButton(f"{s['id']}", callback_data=f"choose_supply:{s['id']}"))
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)
            await message.answer(text + "\nüëâ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É:", reply_markup=keyboard)
            await BookingState.waiting_for_supply_choice.set()
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu_keyboard()) # –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("choose_supply:"), state=BookingState.waiting_for_supply_choice)
    async def process_supply_choice(callback_query: types.CallbackQuery, state: FSMContext):
        supply_id = callback_query.data.split(":")[1]
        await state.update_data(supply_id=supply_id)
        await callback_query.message.edit_reply_markup()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –ø—Ä–∏—ë–º–∫–∏
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="type:x0"),
            types.InlineKeyboardButton("x1", callback_data="type:x1"),
            types.InlineKeyboardButton("x2", callback_data="type:x2"),
            types.InlineKeyboardButton("x3", callback_data="type:x3")
        )
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏—ë–º–∫–∏:", reply_markup=keyboard)
        await BookingState.waiting_for_type.set()

    @dp.callback_query_handler(lambda c: c.data.startswith("type:"), state=BookingState.waiting_for_type)
    async def process_type_choice(callback_query: types.CallbackQuery, state: FSMContext):
        selected_type = callback_query.data.split(":")[1]
        await state.update_data(type=selected_type)
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-20,2025-07-25):")
        await BookingState.waiting_for_date_range.set()

    @dp.message_handler(state=BookingState.waiting_for_date_range)
    async def process_date_range(message: types.Message, state: FSMContext):
        try:
            start_str, end_str = map(str.strip, message.text.split(','))
            await state.update_data(start_date=start_str, end_date=end_str)
            # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ get_cancel_monitoring_keyboard()
            await message.answer("üîç –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤...", reply_markup=get_cancel_monitoring_keyboard()) # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            data = await state.get_data()
            await state.finish() # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            await start_monitoring(message.chat.id, data, message)
            # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ—Ç), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_main_menu_keyboard()) # –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        except Exception as e: # –õ–æ–≤–∏–º –æ–±—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫: 2025-07-20,2025-07-25", reply_markup=get_main_menu_keyboard()) # –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await state.finish() # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    @dp.message_handler(lambda msg: "–æ—Ç–º–µ–Ω–∏—Ç—å" in msg.text.lower(), state="*")
    async def cancel_planning(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard()) # –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
